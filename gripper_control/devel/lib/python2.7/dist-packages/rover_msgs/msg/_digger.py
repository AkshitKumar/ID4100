# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rover_msgs/digger.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class digger(genpy.Message):
  _md5sum = "a7cf0473c0894e95cbc4f5151b34a89d"
  _type = "rover_msgs/digger"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 Step_UD_dir 
int16 Step_UD_step 
int16 LR_dir
int16 LR_step 
int16 probe_dir 
int16 probe_step
int16 sensor_flag
int16 drill
int16 reset_flag
"""
  __slots__ = ['Step_UD_dir','Step_UD_step','LR_dir','LR_step','probe_dir','probe_step','sensor_flag','drill','reset_flag']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Step_UD_dir,Step_UD_step,LR_dir,LR_step,probe_dir,probe_step,sensor_flag,drill,reset_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(digger, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Step_UD_dir is None:
        self.Step_UD_dir = 0
      if self.Step_UD_step is None:
        self.Step_UD_step = 0
      if self.LR_dir is None:
        self.LR_dir = 0
      if self.LR_step is None:
        self.LR_step = 0
      if self.probe_dir is None:
        self.probe_dir = 0
      if self.probe_step is None:
        self.probe_step = 0
      if self.sensor_flag is None:
        self.sensor_flag = 0
      if self.drill is None:
        self.drill = 0
      if self.reset_flag is None:
        self.reset_flag = 0
    else:
      self.Step_UD_dir = 0
      self.Step_UD_step = 0
      self.LR_dir = 0
      self.LR_step = 0
      self.probe_dir = 0
      self.probe_step = 0
      self.sensor_flag = 0
      self.drill = 0
      self.reset_flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9h().pack(_x.Step_UD_dir, _x.Step_UD_step, _x.LR_dir, _x.LR_step, _x.probe_dir, _x.probe_step, _x.sensor_flag, _x.drill, _x.reset_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.Step_UD_dir, _x.Step_UD_step, _x.LR_dir, _x.LR_step, _x.probe_dir, _x.probe_step, _x.sensor_flag, _x.drill, _x.reset_flag,) = _get_struct_9h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9h().pack(_x.Step_UD_dir, _x.Step_UD_step, _x.LR_dir, _x.LR_step, _x.probe_dir, _x.probe_step, _x.sensor_flag, _x.drill, _x.reset_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.Step_UD_dir, _x.Step_UD_step, _x.LR_dir, _x.LR_step, _x.probe_dir, _x.probe_step, _x.sensor_flag, _x.drill, _x.reset_flag,) = _get_struct_9h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9h = None
def _get_struct_9h():
    global _struct_9h
    if _struct_9h is None:
        _struct_9h = struct.Struct("<9h")
    return _struct_9h
