# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rover_msgs/Arm.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Arm(genpy.Message):
  _md5sum = "c65e328e94b4ec51b6508d481408f5c9"
  _type = "rover_msgs/Arm"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 acc_forw
int16 acc_back
int16 chain_forw
int16 chain_back
int16 base_right
int16 base_left
int16 grip
int16 rotate_clk
int16 rotate_aclk
int16 wrist
int16 reset_flag
"""
  __slots__ = ['acc_forw','acc_back','chain_forw','chain_back','base_right','base_left','grip','rotate_clk','rotate_aclk','wrist','reset_flag']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       acc_forw,acc_back,chain_forw,chain_back,base_right,base_left,grip,rotate_clk,rotate_aclk,wrist,reset_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Arm, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.acc_forw is None:
        self.acc_forw = 0
      if self.acc_back is None:
        self.acc_back = 0
      if self.chain_forw is None:
        self.chain_forw = 0
      if self.chain_back is None:
        self.chain_back = 0
      if self.base_right is None:
        self.base_right = 0
      if self.base_left is None:
        self.base_left = 0
      if self.grip is None:
        self.grip = 0
      if self.rotate_clk is None:
        self.rotate_clk = 0
      if self.rotate_aclk is None:
        self.rotate_aclk = 0
      if self.wrist is None:
        self.wrist = 0
      if self.reset_flag is None:
        self.reset_flag = 0
    else:
      self.acc_forw = 0
      self.acc_back = 0
      self.chain_forw = 0
      self.chain_back = 0
      self.base_right = 0
      self.base_left = 0
      self.grip = 0
      self.rotate_clk = 0
      self.rotate_aclk = 0
      self.wrist = 0
      self.reset_flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_11h().pack(_x.acc_forw, _x.acc_back, _x.chain_forw, _x.chain_back, _x.base_right, _x.base_left, _x.grip, _x.rotate_clk, _x.rotate_aclk, _x.wrist, _x.reset_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.acc_forw, _x.acc_back, _x.chain_forw, _x.chain_back, _x.base_right, _x.base_left, _x.grip, _x.rotate_clk, _x.rotate_aclk, _x.wrist, _x.reset_flag,) = _get_struct_11h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_11h().pack(_x.acc_forw, _x.acc_back, _x.chain_forw, _x.chain_back, _x.base_right, _x.base_left, _x.grip, _x.rotate_clk, _x.rotate_aclk, _x.wrist, _x.reset_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.acc_forw, _x.acc_back, _x.chain_forw, _x.chain_back, _x.base_right, _x.base_left, _x.grip, _x.rotate_clk, _x.rotate_aclk, _x.wrist, _x.reset_flag,) = _get_struct_11h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11h = None
def _get_struct_11h():
    global _struct_11h
    if _struct_11h is None:
        _struct_11h = struct.Struct("<11h")
    return _struct_11h
