# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rover_msgs/Power.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Power(genpy.Message):
  _md5sum = "50044eea4a2b4dfd6071c2aa9e0bcb01"
  _type = "rover_msgs/Power"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 power_1
float64 power_2
float64 power_3
float64 power_4
float64 power_5
float64 power_6
float64 power_7
float64[7] bat1
float64[7] bat2
float64[7] bat3
float64[7] bat4
float64[7] bat5
float64[7] bat6
float64[7] bat7
"""
  __slots__ = ['power_1','power_2','power_3','power_4','power_5','power_6','power_7','bat1','bat2','bat3','bat4','bat5','bat6','bat7']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64[7]','float64[7]','float64[7]','float64[7]','float64[7]','float64[7]','float64[7]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       power_1,power_2,power_3,power_4,power_5,power_6,power_7,bat1,bat2,bat3,bat4,bat5,bat6,bat7

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Power, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.power_1 is None:
        self.power_1 = 0.
      if self.power_2 is None:
        self.power_2 = 0.
      if self.power_3 is None:
        self.power_3 = 0.
      if self.power_4 is None:
        self.power_4 = 0.
      if self.power_5 is None:
        self.power_5 = 0.
      if self.power_6 is None:
        self.power_6 = 0.
      if self.power_7 is None:
        self.power_7 = 0.
      if self.bat1 is None:
        self.bat1 = [0.] * 7
      if self.bat2 is None:
        self.bat2 = [0.] * 7
      if self.bat3 is None:
        self.bat3 = [0.] * 7
      if self.bat4 is None:
        self.bat4 = [0.] * 7
      if self.bat5 is None:
        self.bat5 = [0.] * 7
      if self.bat6 is None:
        self.bat6 = [0.] * 7
      if self.bat7 is None:
        self.bat7 = [0.] * 7
    else:
      self.power_1 = 0.
      self.power_2 = 0.
      self.power_3 = 0.
      self.power_4 = 0.
      self.power_5 = 0.
      self.power_6 = 0.
      self.power_7 = 0.
      self.bat1 = [0.] * 7
      self.bat2 = [0.] * 7
      self.bat3 = [0.] * 7
      self.bat4 = [0.] * 7
      self.bat5 = [0.] * 7
      self.bat6 = [0.] * 7
      self.bat7 = [0.] * 7

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.power_1, _x.power_2, _x.power_3, _x.power_4, _x.power_5, _x.power_6, _x.power_7))
      buff.write(_get_struct_7d().pack(*self.bat1))
      buff.write(_get_struct_7d().pack(*self.bat2))
      buff.write(_get_struct_7d().pack(*self.bat3))
      buff.write(_get_struct_7d().pack(*self.bat4))
      buff.write(_get_struct_7d().pack(*self.bat5))
      buff.write(_get_struct_7d().pack(*self.bat6))
      buff.write(_get_struct_7d().pack(*self.bat7))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.power_1, _x.power_2, _x.power_3, _x.power_4, _x.power_5, _x.power_6, _x.power_7,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.bat1 = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.bat2 = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.bat3 = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.bat4 = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.bat5 = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.bat6 = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.bat7 = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.power_1, _x.power_2, _x.power_3, _x.power_4, _x.power_5, _x.power_6, _x.power_7))
      buff.write(self.bat1.tostring())
      buff.write(self.bat2.tostring())
      buff.write(self.bat3.tostring())
      buff.write(self.bat4.tostring())
      buff.write(self.bat5.tostring())
      buff.write(self.bat6.tostring())
      buff.write(self.bat7.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.power_1, _x.power_2, _x.power_3, _x.power_4, _x.power_5, _x.power_6, _x.power_7,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.bat1 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.bat2 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.bat3 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.bat4 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.bat5 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.bat6 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.bat7 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
