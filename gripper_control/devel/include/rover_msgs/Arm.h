// Generated by gencpp from file rover_msgs/Arm.msg
// DO NOT EDIT!


#ifndef ROVER_MSGS_MESSAGE_ARM_H
#define ROVER_MSGS_MESSAGE_ARM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rover_msgs
{
template <class ContainerAllocator>
struct Arm_
{
  typedef Arm_<ContainerAllocator> Type;

  Arm_()
    : acc_forw(0)
    , acc_back(0)
    , chain_forw(0)
    , chain_back(0)
    , base_right(0)
    , base_left(0)
    , grip(0)
    , rotate_clk(0)
    , rotate_aclk(0)
    , wrist(0)
    , reset_flag(0)  {
    }
  Arm_(const ContainerAllocator& _alloc)
    : acc_forw(0)
    , acc_back(0)
    , chain_forw(0)
    , chain_back(0)
    , base_right(0)
    , base_left(0)
    , grip(0)
    , rotate_clk(0)
    , rotate_aclk(0)
    , wrist(0)
    , reset_flag(0)  {
  (void)_alloc;
    }



   typedef int16_t _acc_forw_type;
  _acc_forw_type acc_forw;

   typedef int16_t _acc_back_type;
  _acc_back_type acc_back;

   typedef int16_t _chain_forw_type;
  _chain_forw_type chain_forw;

   typedef int16_t _chain_back_type;
  _chain_back_type chain_back;

   typedef int16_t _base_right_type;
  _base_right_type base_right;

   typedef int16_t _base_left_type;
  _base_left_type base_left;

   typedef int16_t _grip_type;
  _grip_type grip;

   typedef int16_t _rotate_clk_type;
  _rotate_clk_type rotate_clk;

   typedef int16_t _rotate_aclk_type;
  _rotate_aclk_type rotate_aclk;

   typedef int16_t _wrist_type;
  _wrist_type wrist;

   typedef int16_t _reset_flag_type;
  _reset_flag_type reset_flag;




  typedef boost::shared_ptr< ::rover_msgs::Arm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_msgs::Arm_<ContainerAllocator> const> ConstPtr;

}; // struct Arm_

typedef ::rover_msgs::Arm_<std::allocator<void> > Arm;

typedef boost::shared_ptr< ::rover_msgs::Arm > ArmPtr;
typedef boost::shared_ptr< ::rover_msgs::Arm const> ArmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_msgs::Arm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_msgs::Arm_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rover_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rover_msgs': ['/home/akshitk/Documents/ID4100/gripper_control/src/rover_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::Arm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::Arm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::Arm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::Arm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::Arm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::Arm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_msgs::Arm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c65e328e94b4ec51b6508d481408f5c9";
  }

  static const char* value(const ::rover_msgs::Arm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc65e328e94b4ec51ULL;
  static const uint64_t static_value2 = 0xb6508d481408f5c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_msgs::Arm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_msgs/Arm";
  }

  static const char* value(const ::rover_msgs::Arm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_msgs::Arm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 acc_forw\n\
int16 acc_back\n\
int16 chain_forw\n\
int16 chain_back\n\
int16 base_right\n\
int16 base_left\n\
int16 grip\n\
int16 rotate_clk\n\
int16 rotate_aclk\n\
int16 wrist\n\
int16 reset_flag\n\
";
  }

  static const char* value(const ::rover_msgs::Arm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_msgs::Arm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.acc_forw);
      stream.next(m.acc_back);
      stream.next(m.chain_forw);
      stream.next(m.chain_back);
      stream.next(m.base_right);
      stream.next(m.base_left);
      stream.next(m.grip);
      stream.next(m.rotate_clk);
      stream.next(m.rotate_aclk);
      stream.next(m.wrist);
      stream.next(m.reset_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Arm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_msgs::Arm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_msgs::Arm_<ContainerAllocator>& v)
  {
    s << indent << "acc_forw: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acc_forw);
    s << indent << "acc_back: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acc_back);
    s << indent << "chain_forw: ";
    Printer<int16_t>::stream(s, indent + "  ", v.chain_forw);
    s << indent << "chain_back: ";
    Printer<int16_t>::stream(s, indent + "  ", v.chain_back);
    s << indent << "base_right: ";
    Printer<int16_t>::stream(s, indent + "  ", v.base_right);
    s << indent << "base_left: ";
    Printer<int16_t>::stream(s, indent + "  ", v.base_left);
    s << indent << "grip: ";
    Printer<int16_t>::stream(s, indent + "  ", v.grip);
    s << indent << "rotate_clk: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rotate_clk);
    s << indent << "rotate_aclk: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rotate_aclk);
    s << indent << "wrist: ";
    Printer<int16_t>::stream(s, indent + "  ", v.wrist);
    s << indent << "reset_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.reset_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_MSGS_MESSAGE_ARM_H
