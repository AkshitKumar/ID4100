// Generated by gencpp from file rover_msgs/digger.msg
// DO NOT EDIT!


#ifndef ROVER_MSGS_MESSAGE_DIGGER_H
#define ROVER_MSGS_MESSAGE_DIGGER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rover_msgs
{
template <class ContainerAllocator>
struct digger_
{
  typedef digger_<ContainerAllocator> Type;

  digger_()
    : Step_UD_dir(0)
    , Step_UD_step(0)
    , LR_dir(0)
    , LR_step(0)
    , probe_dir(0)
    , probe_step(0)
    , sensor_flag(0)
    , drill(0)
    , reset_flag(0)  {
    }
  digger_(const ContainerAllocator& _alloc)
    : Step_UD_dir(0)
    , Step_UD_step(0)
    , LR_dir(0)
    , LR_step(0)
    , probe_dir(0)
    , probe_step(0)
    , sensor_flag(0)
    , drill(0)
    , reset_flag(0)  {
  (void)_alloc;
    }



   typedef int16_t _Step_UD_dir_type;
  _Step_UD_dir_type Step_UD_dir;

   typedef int16_t _Step_UD_step_type;
  _Step_UD_step_type Step_UD_step;

   typedef int16_t _LR_dir_type;
  _LR_dir_type LR_dir;

   typedef int16_t _LR_step_type;
  _LR_step_type LR_step;

   typedef int16_t _probe_dir_type;
  _probe_dir_type probe_dir;

   typedef int16_t _probe_step_type;
  _probe_step_type probe_step;

   typedef int16_t _sensor_flag_type;
  _sensor_flag_type sensor_flag;

   typedef int16_t _drill_type;
  _drill_type drill;

   typedef int16_t _reset_flag_type;
  _reset_flag_type reset_flag;




  typedef boost::shared_ptr< ::rover_msgs::digger_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_msgs::digger_<ContainerAllocator> const> ConstPtr;

}; // struct digger_

typedef ::rover_msgs::digger_<std::allocator<void> > digger;

typedef boost::shared_ptr< ::rover_msgs::digger > diggerPtr;
typedef boost::shared_ptr< ::rover_msgs::digger const> diggerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_msgs::digger_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_msgs::digger_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rover_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rover_msgs': ['/home/akshitk/Documents/ID4100/gripper_control/src/rover_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::digger_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::digger_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::digger_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::digger_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::digger_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::digger_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_msgs::digger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a7cf0473c0894e95cbc4f5151b34a89d";
  }

  static const char* value(const ::rover_msgs::digger_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa7cf0473c0894e95ULL;
  static const uint64_t static_value2 = 0xcbc4f5151b34a89dULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_msgs::digger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_msgs/digger";
  }

  static const char* value(const ::rover_msgs::digger_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_msgs::digger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 Step_UD_dir \n\
int16 Step_UD_step \n\
int16 LR_dir\n\
int16 LR_step \n\
int16 probe_dir \n\
int16 probe_step\n\
int16 sensor_flag\n\
int16 drill\n\
int16 reset_flag\n\
";
  }

  static const char* value(const ::rover_msgs::digger_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_msgs::digger_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Step_UD_dir);
      stream.next(m.Step_UD_step);
      stream.next(m.LR_dir);
      stream.next(m.LR_step);
      stream.next(m.probe_dir);
      stream.next(m.probe_step);
      stream.next(m.sensor_flag);
      stream.next(m.drill);
      stream.next(m.reset_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct digger_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_msgs::digger_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_msgs::digger_<ContainerAllocator>& v)
  {
    s << indent << "Step_UD_dir: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Step_UD_dir);
    s << indent << "Step_UD_step: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Step_UD_step);
    s << indent << "LR_dir: ";
    Printer<int16_t>::stream(s, indent + "  ", v.LR_dir);
    s << indent << "LR_step: ";
    Printer<int16_t>::stream(s, indent + "  ", v.LR_step);
    s << indent << "probe_dir: ";
    Printer<int16_t>::stream(s, indent + "  ", v.probe_dir);
    s << indent << "probe_step: ";
    Printer<int16_t>::stream(s, indent + "  ", v.probe_step);
    s << indent << "sensor_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sensor_flag);
    s << indent << "drill: ";
    Printer<int16_t>::stream(s, indent + "  ", v.drill);
    s << indent << "reset_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.reset_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_MSGS_MESSAGE_DIGGER_H
