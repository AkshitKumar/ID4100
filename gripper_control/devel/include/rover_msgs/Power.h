// Generated by gencpp from file rover_msgs/Power.msg
// DO NOT EDIT!


#ifndef ROVER_MSGS_MESSAGE_POWER_H
#define ROVER_MSGS_MESSAGE_POWER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rover_msgs
{
template <class ContainerAllocator>
struct Power_
{
  typedef Power_<ContainerAllocator> Type;

  Power_()
    : power_1(0.0)
    , power_2(0.0)
    , power_3(0.0)
    , power_4(0.0)
    , power_5(0.0)
    , power_6(0.0)
    , power_7(0.0)
    , bat1()
    , bat2()
    , bat3()
    , bat4()
    , bat5()
    , bat6()
    , bat7()  {
      bat1.assign(0.0);

      bat2.assign(0.0);

      bat3.assign(0.0);

      bat4.assign(0.0);

      bat5.assign(0.0);

      bat6.assign(0.0);

      bat7.assign(0.0);
  }
  Power_(const ContainerAllocator& _alloc)
    : power_1(0.0)
    , power_2(0.0)
    , power_3(0.0)
    , power_4(0.0)
    , power_5(0.0)
    , power_6(0.0)
    , power_7(0.0)
    , bat1()
    , bat2()
    , bat3()
    , bat4()
    , bat5()
    , bat6()
    , bat7()  {
  (void)_alloc;
      bat1.assign(0.0);

      bat2.assign(0.0);

      bat3.assign(0.0);

      bat4.assign(0.0);

      bat5.assign(0.0);

      bat6.assign(0.0);

      bat7.assign(0.0);
  }



   typedef double _power_1_type;
  _power_1_type power_1;

   typedef double _power_2_type;
  _power_2_type power_2;

   typedef double _power_3_type;
  _power_3_type power_3;

   typedef double _power_4_type;
  _power_4_type power_4;

   typedef double _power_5_type;
  _power_5_type power_5;

   typedef double _power_6_type;
  _power_6_type power_6;

   typedef double _power_7_type;
  _power_7_type power_7;

   typedef boost::array<double, 7>  _bat1_type;
  _bat1_type bat1;

   typedef boost::array<double, 7>  _bat2_type;
  _bat2_type bat2;

   typedef boost::array<double, 7>  _bat3_type;
  _bat3_type bat3;

   typedef boost::array<double, 7>  _bat4_type;
  _bat4_type bat4;

   typedef boost::array<double, 7>  _bat5_type;
  _bat5_type bat5;

   typedef boost::array<double, 7>  _bat6_type;
  _bat6_type bat6;

   typedef boost::array<double, 7>  _bat7_type;
  _bat7_type bat7;




  typedef boost::shared_ptr< ::rover_msgs::Power_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_msgs::Power_<ContainerAllocator> const> ConstPtr;

}; // struct Power_

typedef ::rover_msgs::Power_<std::allocator<void> > Power;

typedef boost::shared_ptr< ::rover_msgs::Power > PowerPtr;
typedef boost::shared_ptr< ::rover_msgs::Power const> PowerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_msgs::Power_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_msgs::Power_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rover_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rover_msgs': ['/home/akshitk/Documents/ID4100/gripper_control/src/rover_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::Power_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::Power_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::Power_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::Power_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::Power_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::Power_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_msgs::Power_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50044eea4a2b4dfd6071c2aa9e0bcb01";
  }

  static const char* value(const ::rover_msgs::Power_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50044eea4a2b4dfdULL;
  static const uint64_t static_value2 = 0x6071c2aa9e0bcb01ULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_msgs::Power_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_msgs/Power";
  }

  static const char* value(const ::rover_msgs::Power_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_msgs::Power_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 power_1\n\
float64 power_2\n\
float64 power_3\n\
float64 power_4\n\
float64 power_5\n\
float64 power_6\n\
float64 power_7\n\
float64[7] bat1\n\
float64[7] bat2\n\
float64[7] bat3\n\
float64[7] bat4\n\
float64[7] bat5\n\
float64[7] bat6\n\
float64[7] bat7\n\
";
  }

  static const char* value(const ::rover_msgs::Power_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_msgs::Power_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.power_1);
      stream.next(m.power_2);
      stream.next(m.power_3);
      stream.next(m.power_4);
      stream.next(m.power_5);
      stream.next(m.power_6);
      stream.next(m.power_7);
      stream.next(m.bat1);
      stream.next(m.bat2);
      stream.next(m.bat3);
      stream.next(m.bat4);
      stream.next(m.bat5);
      stream.next(m.bat6);
      stream.next(m.bat7);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Power_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_msgs::Power_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_msgs::Power_<ContainerAllocator>& v)
  {
    s << indent << "power_1: ";
    Printer<double>::stream(s, indent + "  ", v.power_1);
    s << indent << "power_2: ";
    Printer<double>::stream(s, indent + "  ", v.power_2);
    s << indent << "power_3: ";
    Printer<double>::stream(s, indent + "  ", v.power_3);
    s << indent << "power_4: ";
    Printer<double>::stream(s, indent + "  ", v.power_4);
    s << indent << "power_5: ";
    Printer<double>::stream(s, indent + "  ", v.power_5);
    s << indent << "power_6: ";
    Printer<double>::stream(s, indent + "  ", v.power_6);
    s << indent << "power_7: ";
    Printer<double>::stream(s, indent + "  ", v.power_7);
    s << indent << "bat1[]" << std::endl;
    for (size_t i = 0; i < v.bat1.size(); ++i)
    {
      s << indent << "  bat1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.bat1[i]);
    }
    s << indent << "bat2[]" << std::endl;
    for (size_t i = 0; i < v.bat2.size(); ++i)
    {
      s << indent << "  bat2[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.bat2[i]);
    }
    s << indent << "bat3[]" << std::endl;
    for (size_t i = 0; i < v.bat3.size(); ++i)
    {
      s << indent << "  bat3[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.bat3[i]);
    }
    s << indent << "bat4[]" << std::endl;
    for (size_t i = 0; i < v.bat4.size(); ++i)
    {
      s << indent << "  bat4[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.bat4[i]);
    }
    s << indent << "bat5[]" << std::endl;
    for (size_t i = 0; i < v.bat5.size(); ++i)
    {
      s << indent << "  bat5[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.bat5[i]);
    }
    s << indent << "bat6[]" << std::endl;
    for (size_t i = 0; i < v.bat6.size(); ++i)
    {
      s << indent << "  bat6[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.bat6[i]);
    }
    s << indent << "bat7[]" << std::endl;
    for (size_t i = 0; i < v.bat7.size(); ++i)
    {
      s << indent << "  bat7[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.bat7[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_MSGS_MESSAGE_POWER_H
