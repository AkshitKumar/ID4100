// Generated by gencpp from file rover_msgs/GripperMotion.msg
// DO NOT EDIT!


#ifndef ROVER_MSGS_MESSAGE_GRIPPERMOTION_H
#define ROVER_MSGS_MESSAGE_GRIPPERMOTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rover_msgs
{
template <class ContainerAllocator>
struct GripperMotion_
{
  typedef GripperMotion_<ContainerAllocator> Type;

  GripperMotion_()
    : button_1(false)
    , button_2(false)
    , button_3(false)
    , button_4(false)
    , button_5(false)
    , button_6(false)  {
    }
  GripperMotion_(const ContainerAllocator& _alloc)
    : button_1(false)
    , button_2(false)
    , button_3(false)
    , button_4(false)
    , button_5(false)
    , button_6(false)  {
  (void)_alloc;
    }



   typedef uint8_t _button_1_type;
  _button_1_type button_1;

   typedef uint8_t _button_2_type;
  _button_2_type button_2;

   typedef uint8_t _button_3_type;
  _button_3_type button_3;

   typedef uint8_t _button_4_type;
  _button_4_type button_4;

   typedef uint8_t _button_5_type;
  _button_5_type button_5;

   typedef uint8_t _button_6_type;
  _button_6_type button_6;




  typedef boost::shared_ptr< ::rover_msgs::GripperMotion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_msgs::GripperMotion_<ContainerAllocator> const> ConstPtr;

}; // struct GripperMotion_

typedef ::rover_msgs::GripperMotion_<std::allocator<void> > GripperMotion;

typedef boost::shared_ptr< ::rover_msgs::GripperMotion > GripperMotionPtr;
typedef boost::shared_ptr< ::rover_msgs::GripperMotion const> GripperMotionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_msgs::GripperMotion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_msgs::GripperMotion_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rover_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rover_msgs': ['/home/akshitk/Documents/ID4100/gripper_control/src/rover_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::GripperMotion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::GripperMotion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::GripperMotion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::GripperMotion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::GripperMotion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::GripperMotion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_msgs::GripperMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8edaeaec64be0c5d3ae535eef1f2c3ef";
  }

  static const char* value(const ::rover_msgs::GripperMotion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8edaeaec64be0c5dULL;
  static const uint64_t static_value2 = 0x3ae535eef1f2c3efULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_msgs::GripperMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_msgs/GripperMotion";
  }

  static const char* value(const ::rover_msgs::GripperMotion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_msgs::GripperMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool button_1\n\
bool button_2\n\
bool button_3\n\
bool button_4\n\
bool button_5\n\
bool button_6\n\
\n\
";
  }

  static const char* value(const ::rover_msgs::GripperMotion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_msgs::GripperMotion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.button_1);
      stream.next(m.button_2);
      stream.next(m.button_3);
      stream.next(m.button_4);
      stream.next(m.button_5);
      stream.next(m.button_6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperMotion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_msgs::GripperMotion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_msgs::GripperMotion_<ContainerAllocator>& v)
  {
    s << indent << "button_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_1);
    s << indent << "button_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_2);
    s << indent << "button_3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_3);
    s << indent << "button_4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_4);
    s << indent << "button_5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_5);
    s << indent << "button_6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_MSGS_MESSAGE_GRIPPERMOTION_H
